@using RealEstateApp.Web.ViewModels
@using RealEstateApp.Shared.Dtos
@model FiltroPropiedadViewModel

@{
    ViewData["Title"] = "Inicio Cliente";
    Layout = "~/Views/Shared/_LayoutCliente.cshtml";

    var usuario = ViewBag.UsuarioNombre as string ?? "Cliente";

    // Endpoints (AJAX)
    var addUrl = Url.Action("AgregarFavorito", "Cliente");
    var removeUrl = Url.Action("QuitarFavorito", "Cliente");
    var filtrarUrl = Url.Action("FiltrarAjax", "Cliente");
    var favIdsUrl = Url.Action("FavoritosIds", "Cliente");

    // Normaliza rutas de imagen
    string Normalize(string raw)
    {
        if (string.IsNullOrWhiteSpace(raw)) return null;
        raw = raw.Trim();
        if (raw.StartsWith("http://", StringComparison.OrdinalIgnoreCase) ||
            raw.StartsWith("https://", StringComparison.OrdinalIgnoreCase)) return raw;
        if (raw.StartsWith("~/")) return "/" + raw[2..].TrimStart('/');
        if (raw.StartsWith("/")) return raw;
        return "/" + raw.TrimStart('/');
    }

    // Tipos para el dropdown (si el ViewModel trae lista úsala; si no, muestra solo "Todos")
    var tipos = (Model?.TiposDisponibles ?? new List<string>()).Distinct().OrderBy(t => t).ToList();
}

<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
        <a class="navbar-brand" href="#">🏡 RealEstateApp Cliente</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#menuCliente">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="menuCliente">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link text-white" asp-controller="Cliente" asp-action="MisPropiedades">
                        <i class="bi bi-building"></i> Mis propiedades
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" asp-controller="Cliente" asp-action="Agentes">
                        <i class="bi bi-person-badge"></i> Ver Agentes
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" asp-controller="Cuenta" asp-action="CerrarSesion">
                        <i class="bi bi-box-arrow-right"></i> Cerrar sesión
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="container">
    <h2 class="mt-4 mb-3 text-center">
        🏡 Bienvenido Cliente <strong class="text-primary">@usuario</strong>
    </h2>

    <!-- Filtros -->
    <form asp-action="Index" method="get" class="mb-4" id="form-filtros">
        <div class="row g-2 justify-content-center">
            <div class="col-md-2">
                <input asp-for="Codigo" class="form-control" placeholder="Código (ej. PROP-001)" />
            </div>

            <div class="col-md-2">
                <select asp-for="Tipo" class="form-select">
                    <option value="">Todos</option>
                    @foreach (var t in tipos)
                    {
                        <option value="@t">@t</option>
                    }
                </select>
            </div>

            <div class="col-md-2">
                <input asp-for="Habitaciones" class="form-control" placeholder="Habitaciones" />
            </div>

            <div class="col-md-2">
                <input asp-for="Banos" class="form-control" placeholder="Baños" />
            </div>

            <div class="col-md-2">
                <input asp-for="PrecioMin" type="number" step="0.01" min="0" class="form-control" placeholder="Precio mín" />
            </div>
            <div class="col-md-2">
                <input asp-for="PrecioMax" type="number" step="0.01" min="0" class="form-control" placeholder="Precio máx" />
            </div>

            <div class="col-md-12 text-center mt-3">
                <button type="submit" class="btn btn-primary px-5">🔍 Filtrar</button>
            </div>
        </div>
    </form>

    <hr />

    <!-- Resultados (solo los que envía el controlador; no hay tarjetas de demo) -->
    <div id="contenedor-propiedades">
        @if (Model?.Resultados == null || !Model.Resultados.Any())
        {
            <div class="alert alert-warning text-center">
                No se encontraron propiedades que coincidan con los filtros.
            </div>
        }
        else
        {
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4 justify-content-center">
                @foreach (var item in Model.Resultados)
                {
                    var src = Normalize(item.ImagenUrl) ?? Normalize(item.FotoPrincipal) ?? Url.Content("~/images/propiedades/placeholder.jpg");
                    var detalleUrl = Url.Action("Detalle", "Propiedad", new { codigo = item.Codigo });

                    <div class="col">
                        <div class="card h-100 shadow-lg border-0 rounded-4 propiedad-card"
                             data-detalle="@detalleUrl"
                             style="cursor: pointer; transition: transform 0.2s;">
                            <img src="@src"
                                 alt="Imagen propiedad @item.Codigo"
                                 class="img-fluid rounded-top"
                                 style="height: 200px; object-fit: cover;"
                                 loading="lazy"
                                 onerror="this.onerror=null; this.src='@Url.Content("~/images/propiedades/placeholder.jpg")';" />

                            <div class="card-body p-3 pb-2">
                                <h6 class="card-title fw-semibold text-truncate">@item.Tipo - @item.Ubicacion</h6>
                                <p class="mb-1 small">
                                    <strong>@item.TipoVenta:</strong>
                                    US$ @item.Precio.ToString("N2")
                                </p>
                                <p class="mb-2 text-muted small">Código: @item.Codigo</p>

                                <div class="d-flex justify-content-between align-items-center small text-muted mb-2">
                                    <span>🛏 @item.Habitaciones</span>
                                    <span>🛁 @item.Banos</span>
                                    <span>📐 @((item.MetrosCuadrados > 0 ? item.MetrosCuadrados : item.Metros)) m²</span>
                                </div>

                                <div class="d-grid">
                                    <button type="button"
                                            class="btn @(item.EsFavorita ? "btn-danger" : "btn-outline-danger") btn-sm btn-favorito"
                                            data-codigo="@item.Codigo"
                                            data-fav="@(item.EsFavorita.ToString().ToLower())">
                                        <i class="bi bi-heart@(item.EsFavorita ? "-fill" : "")"></i>
                                        @(item.EsFavorita ? "Añadido" : "Añadir a favoritos")
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        const ADD_URL     = '@addUrl';
        const REMOVE_URL  = '@removeUrl';
        const FILTRAR_URL = '@filtrarUrl';
        const FAV_IDS_URL = '@favIdsUrl';

        function pintarBotonFav(btn, isFav) {
          btn.dataset.fav = isFav.toString();
          btn.classList.toggle('btn-danger', isFav);
          btn.classList.toggle('btn-outline-danger', !isFav);
          btn.innerHTML = isFav
            ? '<i class="bi bi-heart-fill"></i> Añadido'
            : '<i class="bi bi-heart"></i> Añadir a favoritos';
        }

        async function syncFavButtons() {
          try {
            const resp = await fetch(FAV_IDS_URL, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
            if (!resp.ok) return;
            const favCodes = await resp.json();
            document.querySelectorAll('.btn-favorito').forEach(btn => {
              pintarBotonFav(btn, favCodes.includes(btn.dataset.codigo));
            });
          } catch (_) {}
        }

        // Filtro con redirección si hay código exacto
        document.getElementById('form-filtros').addEventListener('submit', async function (e) {
          e.preventDefault();
          const formData = new FormData(this);

          const codigo = (formData.get('Codigo') || '').toString().trim();
          if (codigo) {
            window.location.href = `/Propiedad/Detalle?codigo=${encodeURIComponent(codigo)}`;
            return;
          }

          // Normaliza decimales y evita min > max
          const minRaw = (formData.get('PrecioMin') || '').toString().replace(',', '.');
          const maxRaw = (formData.get('PrecioMax') || '').toString().replace(',', '.');
          let min = parseFloat(minRaw);
          let max = parseFloat(maxRaw);
          if (!isNaN(min) && !isNaN(max) && min > max) {
            [min, max] = [max, min];
            formData.set('PrecioMin', min.toString());
            formData.set('PrecioMax', max.toString());
          }

          const qs = new URLSearchParams(formData).toString();

          try {
            const resp = await fetch(`${FILTRAR_URL}?${qs}`, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
            const html = await resp.text();
            document.getElementById('contenedor-propiedades').innerHTML = html;
            await syncFavButtons();
          } catch (err) { console.error('Error al filtrar:', err); }
        });

      
        document.addEventListener('click', function(ev) {
          const btnFav = ev.target.closest('.btn-favorito');
          if (btnFav) return;
          const card = ev.target.closest('.propiedad-card');
          if (!card) return;
          const url = card.dataset.detalle;
          if (url) window.location.href = url;
        });


        document.addEventListener('click', async function (ev) {
          const btn = ev.target.closest('.btn-favorito');
          if (!btn) return;
          ev.preventDefault();
          if (btn.dataset.loading === 'true') return;
          btn.dataset.loading = 'true';

          const codigo = btn.dataset.codigo;
          const isFav  = btn.dataset.fav === 'true';
          const url    = isFav ? '@removeUrl' : '@addUrl';

          try {
            const resp = await fetch(url, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' },
              body: JSON.stringify({ codigo })
            });
            if (resp.status === 401) { window.location.href = '/Cuenta/Login'; return; }

            const data = await resp.json().catch(() => ({}));
            if (!resp.ok || !data.success) { alert(data.message || 'Operación no realizada.'); return; }

            pintarBotonFav(btn, !isFav);
          } catch (e) {
            console.error('Favoritos error:', e);
            alert('Error de red.');
          } finally {
            btn.dataset.loading = 'false';
          }
        });

        document.addEventListener('DOMContentLoaded', syncFavButtons);
        window.addEventListener('pageshow', async (e) => { if (e.persisted) await syncFavButtons(); });
    </script>
}
