@model RealEstateApp.Web.ViewModels.FiltroPropiedadViewModel

@{
    ViewData["Title"] = "Inicio";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="mt-4 mb-4 text-center">🏡 Propiedades Disponibles</h2>

<form asp-action="Index" method="get" class="mb-4" id="form-filtros">
    <div class="row g-2 justify-content-center">
        <div class="col-md-2">
            <input asp-for="Codigo" class="form-control" placeholder="Código" />
        </div>

        <div class="col-md-2">
            <select asp-for="Tipo" class="form-select">
                <option value="">Todos</option>
            </select>
        </div>

        <div class="col-md-2">
            <input asp-for="Habitaciones" class="form-control" placeholder="Habitaciones" />
        </div>
        <div class="col-md-2">
            <input asp-for="Banos" class="form-control" placeholder="Baños" />
        </div>

        <div class="col-md-2">
            <input asp-for="PrecioMin" type="number" step="0.01" min="0" class="form-control" placeholder="Precio min" />
        </div>
        <div class="col-md-2">
            <input asp-for="PrecioMax" type="number" step="0.01" min="0" class="form-control" placeholder="Precio max" />
        </div>

        <div class="col-md-12 text-center mt-3">
            <button type="submit" class="btn btn-primary px-5">🔍 Filtrar</button>
        </div>
    </div>
</form>

<hr />

<div id="contenedor-propiedades">
    @{
        // ⛔ Códigos a ocultar SIEMPRE (las tarjetas de demo)
        var ocultar = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        { "PROP-001","PROP-002","PROP-003","PROP-004" };

        var filtradas = (Model.Resultados ?? Enumerable.Empty<RealEstateApp.Shared.Dtos.PropiedadDto>())
        .Where(p =>
        p.Precio > 0m &&
        !string.IsNullOrWhiteSpace(p.Tipo) &&
        !p.Tipo.StartsWith("Sin tipo", StringComparison.OrdinalIgnoreCase) &&
        (string.IsNullOrWhiteSpace(p.Codigo) || !ocultar.Contains(p.Codigo))
        );

        // Orden simple por código
        var ordenadas = filtradas.OrderBy(p => p.Codigo).ToList();
    }

    @if (!ordenadas.Any())
    {
        <div class="alert alert-warning text-center">
            No se encontraron propiedades que coincidan con los filtros.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4 g-4 justify-content-center">
            @foreach (var item in ordenadas)
            {
                var img = !string.IsNullOrWhiteSpace(item.ImagenUrl) ? item.ImagenUrl
                : !string.IsNullOrWhiteSpace(item.FotoPrincipal) ? item.FotoPrincipal
                : "/images/propiedades/placeholder.jpg";

                var detalleUrl = Url.Action("Detalle", "Propiedad", new { codigo = item.Codigo });

                <div class="col">
                    <div class="card h-100 shadow-lg border-0 rounded-4 propiedad-card"
                         role="button"
                         onclick="location.href='@detalleUrl';"
                         style="cursor:pointer; transition: transform .2s;">
                        <img src="@img"
                             alt="Imagen propiedad @item.Codigo"
                             class="img-fluid rounded-top"
                             style="height:200px; object-fit:cover;"
                             loading="lazy"
                             onerror="this.onerror=null; this.src='/images/propiedades/placeholder.jpg';" />
                        <div class="card-body p-3 pb-2">
                            <h6 class="card-title fw-semibold text-truncate">
                                @item.Tipo - @item.Ubicacion
                            </h6>
                            <p class="mb-1 small">
                                <strong>@item.TipoVenta:</strong> US$ @item.Precio.ToString("N2")
                            </p>
                            <p class="mb-2 text-muted small">Código: @item.Codigo</p>
                            <div class="d-flex justify-content-between align-items-center small text-muted">
                                <span>🛏 @item.Habitaciones</span>
                                <span>🛁 @item.Banos</span>
                                <span>📐 @(item.Metros > 0 ? item.Metros : item.MetrosCuadrados) m²</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('form-filtros');
            const contenedor = document.getElementById('contenedor-propiedades');

            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                const formData = new FormData(form);
                const codigo = (formData.get('Codigo') || '').trim();

                try {
                    if (codigo) {
                        window.location.href = `/Propiedad/Detalle?codigo=${encodeURIComponent(codigo)}`;
                        return;
                    }

                    const queryString = new URLSearchParams(formData).toString();
                    const urlAjax = `/Home/FiltrarAjax?${queryString}`;

                    const response = await fetch(urlAjax, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                    if (!response.ok) throw new Error(`HTTP ${response.status}`);

                    const html = await response.text();
                    contenedor.innerHTML = html;
                } catch (err) {
                    console.error('Error al filtrar:', err);
                    alert('Ocurrió un error al filtrar. Revisa la consola.');
                }
            });
        });
    </script>
}
